from .utils import add_new_driver_card
from flask import Blueprint, render_template, request, session, redirect, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
from app.models import Employer
from app import db
from app.helpers import konvertuj_tekst
from sqlalchemy import or_
import os
import hashlib
from app.utils import hash_jmbg

from sqlalchemy.orm import joinedload
from .models import Driver, Rating, Employer

from datetime import datetime

from .utils import generate_reset_token
from .utils import verify_reset_token

from .decorators import login_required, superadmin_required
from app.models import Driver, DriverCard

main = Blueprint('main', __name__)


def generate_salt():
    return os.urandom(16)

def hash_jmbg_with_salt(jmbg: str, salt: bytes) -> str:
    return hashlib.sha256(salt + jmbg.encode('utf-8')).hexdigest()



def add_new_driver_card(driver, new_card_number, expiry_date=None):
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ò —Å–≤–µ –ø—Ä–µ—Ç—Ö–æ–¥–Ω–µ –∫–∞—Ä—Ç–∏—Ü–µ
    for card in driver.cards:
        card.is_active = False

    # –î–æ–¥–∞—ò –Ω–æ–≤—É –∫–∞–æ –∞–∫—Ç–∏–≤–Ω—É
    new_card = DriverCard(
        card_number=new_card_number,
        driver_id=driver.id,
        is_active=True,
        expiry_date=expiry_date
    )
    db.session.add(new_card)
    db.session.commit()
    return new_card

@main.route('/drivers/<int:driver_id>/add_card', methods=['GET', 'POST'])
def add_driver_card(driver_id):
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)

    if request.method == 'POST':
        new_card_number = request.form.get('card_number', '').strip()
        issue_date_str = request.form.get('issue_date', '').strip()
        expiry_date_str = request.form.get('expiry_date', '').strip()

        # –ü—Ä–æ–≤–µ—Äa –¥–∞—Ç—É–º–∞
        issue_date = None
        expiry_date = None

        if issue_date_str:
            try:
                issue_date = datetime.strptime(issue_date_str, '%Y-%m-%d').date()
            except ValueError:
                flash("–ù–µ–∏—Å–ø—Ä–∞–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—É–º–∞ –∏–∑–¥–∞–≤–∞—ö–∞.")
                return redirect(url_for('main.add_driver_card', driver_id=driver.id))

        if expiry_date_str:
            try:
                expiry_date = datetime.strptime(expiry_date_str, '%Y-%m-%d').date()
            except ValueError:
                flash("–ù–µ–∏—Å–ø—Ä–∞–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—É–º–∞ –∏—Å—Ç–µ–∫–∞.")
                return redirect(url_for('main.add_driver_card', driver_id=driver.id))

        # –ü—Ä–æ–≤–µ—Äa –¥–∞ –ª–∏ –∫–∞—Ä—Ç–∏—Ü–∞ –≤–µ—õ –ø–æ—Å—Ç–æ—ò–∏ (—ò–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–∏ –±—Ä–æ—ò)
        existing_card = DriverCard.query.filter_by(card_number=new_card_number).first()
        if existing_card:
            flash("–û–≤–∞ –∫–∞—Ä—Ç–∏—Ü–∞ –≤–µ—õ –ø–æ—Å—Ç–æ—ò–∏ —É —Å–∏—Å—Ç–µ–º—É.")
            return redirect(url_for('main.add_driver_card', driver_id=driver.id))

        # –î–æ–¥–∞—ò –Ω–æ–≤—É –∫–∞—Ä—Ç–∏—Ü—É –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞—ò –ø—Ä–µ—Ç—Ö–æ–¥–Ω–µ
        add_new_driver_card(driver, new_card_number, issue_date, expiry_date)
        flash("–ù–æ–≤–∞ –∫–∞—Ä—Ç–∏—Ü–∞ —ò–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–¥–∞—Ç–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞.")
        return redirect(url_for('main.driver_profile', driver_id=driver.id))  # –∏–ª–∏ –Ω–µ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞ –¥–µ—Ç–∞—ô–∏–º–∞ –≤–æ–∑–∞—á–∞

    return render_template('add_card.html', driver=driver)


# INDEX
@main.route('/')
def index():
    if 'user_id' in session:
        print(dict(session))
        user_type = session.get('user_type')
        if user_type == 'employer':
            return redirect(url_for('main.drivers'))
        elif user_type == 'superadmin':
            return redirect(url_for('main.admin_dashboard'))
    return render_template('index.html', current_lang=session.get('lang', 'sr'))



from datetime import datetime

from flask import flash, redirect, render_template, request, session, url_for
from datetime import datetime
from app import db
from app.models import Driver, DriverCard
from app.utils import generate_salt, hash_jmbg_with_salt

@main.route('/drivers/add', methods=['GET', 'POST'])
def add_driver():
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.")
        return redirect(url_for('main.login'))

    if request.method == 'POST':
        full_name = request.form['full_name'].strip()
        jmbg = request.form['jmbg'].strip()

        # –ü—Ä–æ–≤–µ—Äa –¥—É–∂–∏–Ω–µ JMBG
        if len(jmbg) != 13 or not jmbg.isdigit():
            flash("–à–ú–ë–ì –º–æ—Ä–∞ —Å–∞–¥—Ä–∂–∞—Ç–∏ —Ç–∞—á–Ω–æ 13 —Ü–∏—Ñ–∞—Ä–∞.")
            return redirect(url_for('main.add_driver'))

        card_number = request.form.get('card_number', '').strip()
        issue_date_str = request.form.get('issue_date', '').strip()
        expiry_date_str = request.form.get('expiry_date', '').strip()
        cpc_card_number = request.form.get('cpc_card_number', '').strip()
        cpc_expiry_date_str = request.form.get('cpc_expiry_date', '').strip()

        if card_number and len(card_number) != 16:
            flash("–ë—Ä–æ—ò —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∫–∞—Ä—Ç–∏—Ü–µ –º–æ—Ä–∞ –∏–º–∞—Ç–∏ —Ç–∞—á–Ω–æ 16 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞.")
            return redirect(url_for('main.add_driver'))

        issue_date = datetime.strptime(issue_date_str, '%Y-%m-%d').date() if issue_date_str else None
        expiry_date = datetime.strptime(expiry_date_str, '%Y-%m-%d').date() if expiry_date_str else None
        cpc_expiry_date = datetime.strptime(cpc_expiry_date_str, '%Y-%m-%d').date() if cpc_expiry_date_str else None

        # –¢—Ä–∞–∂–∏ –ø–æ—Å—Ç–æ—ò–µ—õ–µ–≥ –≤–æ–∑–∞—á–∞ —Ç–∞–∫–æ —à—Ç–æ –ø—Ä–æ–ª–∞–∑–∏ –∫—Ä–æ–∑ —Å–≤–µ –∏ —É–ø–æ—Ä–µ—í—É—ò–µ hash
        existing_driver = None
        all_drivers = Driver.query.all()
        for driver in all_drivers:
            if hash_jmbg_with_salt(jmbg, driver.salt) == driver.jmbg_hashed:
                existing_driver = driver
                break

        if existing_driver:
            if existing_driver.active and existing_driver.employer_id == employer_id:
                flash("–í–æ–∑–∞—á –≤–µ—õ —Ä–∞–¥–∏ –∫–æ–¥ –≤–∞—Å.")
                return redirect(url_for('main.drivers'))

            elif existing_driver.active and existing_driver.employer_id != employer_id:
                flash("–í–æ–∑–∞—á –≤–µ—õ —Ä–∞–¥–∏ –∫–æ–¥ –¥—Ä—É–≥–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞.")
                return redirect(url_for('main.search_driver'))

            else:
                existing_driver.full_name = full_name
                existing_driver.employer_id = employer_id
                existing_driver.cpc_card_number = cpc_card_number or None
                existing_driver.cpc_expiry_date = cpc_expiry_date
                existing_driver.active = True
                db.session.commit()

                if card_number:
                    new_card = DriverCard(
                        card_number=card_number,
                        driver_id=existing_driver.id,
                        is_active=True,
                        issue_date=issue_date,
                        expiry_date=expiry_date
                    )
                    db.session.add(new_card)
                    db.session.commit()

                flash("–ü–æ—Å—Ç–æ—ò–µ—õ–∏ –≤–æ–∑–∞—á —ò–µ –ø—Ä–µ—É–∑–µ—Ç —É –≤–∞—à—É —Ñ–∏—Ä–º—É.")
                return redirect(url_for('main.drivers'))

        # –î–æ–¥–∞–≤–∞—ö–µ –Ω–æ–≤–æ–≥ –≤–æ–∑–∞—á–∞ —Å–∞ –Ω–æ–≤–∏–º salt-–æ–º
        salt = generate_salt()
        jmbg_hashed = hash_jmbg_with_salt(jmbg, salt)

        new_driver = Driver(
            full_name=full_name,
            jmbg_hashed=jmbg_hashed,
            salt=salt,
            cpc_card_number=cpc_card_number or None,
            cpc_expiry_date=cpc_expiry_date,
            employer_id=employer_id,
            active=True
        )
        db.session.add(new_driver)
        db.session.commit()

        if card_number:
            new_card = DriverCard(
                card_number=card_number,
                driver_id=new_driver.id,
                is_active=True,
                issue_date=issue_date,
                expiry_date=expiry_date
            )
            db.session.add(new_card)
            db.session.commit()

        flash("–ù–æ–≤–∏ –≤–æ–∑–∞—á —ò–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–¥–∞—Ç.")
        return redirect(url_for('main.drivers'))

    return render_template('add_driver.html', current_lang=session.get('lang', 'sr'))




@main.route('/drivers/search', methods=['GET', 'POST'])
def search_driver():
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.")
        return redirect(url_for('main.login'))

    driver = None
    ratings_info = []
    show_additional_fields = False

    if request.method == 'POST':
        search_input = request.form.get('search_input', '').strip()
        print(f"üîç –ü—Ä–µ—Ç—Ä–∞–≥–∞ –∑–∞ —É–Ω–µ—Ç–∏–º: {search_input}")

        if search_input.isdigit() and len(search_input) == 13:
            from app.utils import hash_jmbg_with_salt  # —É–≤–µ–∑–∏ —Ñ—É–Ω–∫—Ü–∏—ò—É
            all_drivers = Driver.query.all()
            for d in all_drivers:
                hashed = hash_jmbg_with_salt(search_input, d.salt)
                if hashed == d.jmbg_hashed:
                    driver = d
                    break
            print(f"üîé –ü—Ä–æ–Ω–∞—í–µ–Ω –≤–æ–∑–∞—á: {driver}")
        else:
            card = DriverCard.query.filter_by(card_number=search_input).first()
            print(f"üîé –ü—Ä–æ–Ω–∞—í–µ–Ω–∞ –∫–∞—Ä—Ç–∏—Ü–∞: {card}")
            if card:
                driver = card.driver

        if not driver:
            flash("–í–æ–∑–∞—á —Å–∞ —É–Ω–µ—Ç–∏–º –ø–æ–¥–∞—Ü–∏–º–∞ –Ω–∏—ò–µ –ø—Ä–æ–Ω–∞—í–µ–Ω.")
            show_additional_fields = True
        else:
            for r in driver.ratings:
                employer = Employer.query.get(r.employer_id)
                ratings_info.append({
                    'employer_name': employer.company_name if employer else "–ù–µ–ø–æ–∑–Ω–∞—Ç –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü",
                    'stars': r.stars,
                    'comment': r.comment,
                    'rated_at': r.created_at.strftime('%d.%m.%Y') if r.created_at else ''
                })

    already_employed_by_other = False
    if driver:
        already_employed_by_other = (
            driver.employer_id and not driver.active and driver.employer_id != employer_id
        )

    return render_template('search_driver.html',
                           driver=driver,
                           ratings_info=ratings_info,
                           already_employed_by_other=already_employed_by_other,
                           show_additional_fields=show_additional_fields,
                           current_lang=session.get('lang', 'sr'))


@main.route('/adopt_driver/<int:driver_id>', methods=['POST'])
def adopt_driver(driver_id):
    if 'user_id' not in session or session.get('user_type') != 'employer':
        flash('–ù–µ–º–∞—Ç–µ –¥–æ–∑–≤–æ–ª—É –∑–∞ –æ–≤—É –∞–∫—Ü–∏—ò—É.', 'danger')
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)
    employer_id = session['user_id']

    if driver.employer_id == employer_id:
        if not driver.active:
            driver.active = True
            db.session.commit()
            flash('–í–æ–∑–∞—á —ò–µ –ø–æ–Ω–æ–≤–æ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω —É –≤–∞—à–µ–º —Å–∏—Å—Ç–µ–º—É.', 'success')
        else:
            flash('–í–æ–∑–∞—á —ò–µ –≤–µ—õ –∫–æ–¥ –≤–∞—Å –∏ –∞–∫—Ç–∏–≤–∞–Ω —ò–µ.', 'info')
        return redirect(url_for('main.driver_detail', driver_id=driver.id))

    # –ê–∫–æ —ò–µ –≤–æ–∑–∞—á –∞–∫—Ç–∏–≤–∞–Ω –∫–æ–¥ –¥—Ä—É–≥–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ - –ù–ï –î–û–ó–í–û–â–ê–í–ê–ú–û –ø—Ä–µ—É–∑–∏–º–∞—ö–µ
    if driver.active and driver.employer_id != employer_id:
        flash('–í–æ–∑–∞—á —ò–µ –≤–µ—õ –∞–∫—Ç–∏–≤–∞–Ω –∫–æ–¥ –¥—Ä—É–≥–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ –∏ –Ω–µ –º–æ–∂–µ —Å–µ –ø—Ä–µ—É–∑–µ—Ç–∏.', 'warning')
        return redirect(url_for('main.driver_detail', driver_id=driver.id))

    # –í–æ–∑–∞—á –Ω–∏—ò–µ –∞–∫—Ç–∏–≤–∞–Ω –∏–ª–∏ –Ω–µ–º–∞ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞, –º–æ–∂–µ —Å–µ –ø—Ä–µ—É–∑–µ—Ç–∏
    driver.employer_id = employer_id
    driver.active = True
    db.session.commit()

    flash(f'–í–æ–∑–∞—á {driver.full_name} —ò–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—É–∑–µ—Ç —É –≤–∞—à—É —Ñ–∏—Ä–º—É.', 'success')
    return redirect(url_for('main.driver_detail', driver_id=driver.id))




@main.route('/profile', methods=['GET', 'POST'])
def employer_profile():
    if session.get('user_type') != 'employer':
        flash("–ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç—É–ø –æ–≤–æ—ò —Å—Ç—Ä–∞–Ω–∏—Ü–∏.")
        return redirect(url_for('main.index'))

    employer_id = session.get('user_id')
    employer = Employer.query.get_or_404(employer_id)

    if request.method == 'POST':
        employer.company_name = request.form['company_name']
        employer.email = request.form['email']

        new_password = request.form.get('password')
        if new_password:
            employer.password_hash = generate_password_hash(new_password)

        db.session.commit()
        flash("–ü–æ–¥–∞—Ü–∏ —Å—É —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω–∏.")
        return redirect(url_for('main.drivers'))

    return render_template('employer_profile.html', employer=employer, current_lang=session.get('lang', 'sr'))


@main.route('/drivers/<int:driver_id>/activate', methods=['POST'])
def activate_existing_driver(driver_id):
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)

    # –ê–∫–æ —ò–µ –≤–µ—õ –∞–∫—Ç–∏–≤–∞–Ω –∫–æ–¥ –¥—Ä—É–≥–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ ‚Üí –∑–∞–±—Ä–∞–Ω–∞
    if driver.active and driver.employer_id != employer_id:
        flash("–û–≤–∞—ò –≤–æ–∑–∞—á —ò–µ —Ç—Ä–µ–Ω—É—Ç–Ω–æ –∑–∞–ø–æ—Å–ª–µ–Ω –∫–æ–¥ –¥—Ä—É–≥–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–∞ –ø—Ä–µ—É–∑–µ—Ç–∏.")
        return redirect(url_for('main.drivers'))

    # –ê–∫–æ —ò–µ –≤–µ—õ –∫–æ–¥ –æ–≤–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ ‚Üí —Å–∞–º–æ –æ—Å–∏–≥—É—Ä–∞—ò –¥–∞ —ò–µ –∞–∫—Ç–∏–≤–∞–Ω
    if driver.employer_id == employer_id:
        driver.active = True
        db.session.commit()
        flash(f"–í–æ–∑–∞—á {driver.full_name} —ò–µ —Å–∞–¥–∞ –∞–∫—Ç–∏–≤–∞–Ω –∫–æ–¥ –≤–∞—à–µ —Ñ–∏—Ä–º–µ.")
        return redirect(url_for('main.drivers'))

    # –ê–∫–æ —ò–µ –Ω–µ–∞–∫—Ç–∏–≤–∞–Ω ‚Üí –ø—Ä–µ—É–∑–º–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–∞—ò
    driver.employer_id = employer_id
    driver.active = True
    db.session.commit()
    flash(f"–í–æ–∑–∞—á {driver.full_name} —ò–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–¥–∞—Ç –≤–∞—à–æ—ò —Ñ–∏—Ä–º–∏.")
    return redirect(url_for('main.drivers'))



# REGISTER
@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        company_name = request.form['company_name'].strip()
        pib = request.form['pib'].strip()
        email = request.form['email'].strip()
        password = request.form['password']
        password_hash = generate_password_hash(password)

        # –í–∞–ª–∏–¥–∞—Ü–∏—ò–∞ PIB
        if not pib.isdigit() or len(pib) != 9:
            flash("PIB –º–æ—Ä–∞ —Å–∞–¥—Ä–∂–∞—Ç–∏ —Ç–∞—á–Ω–æ 9 —Ü–∏—Ñ–∞—Ä–∞.")
            return redirect(url_for('main.register'))

        existing = Employer.query.filter_by(pib=pib).first()
        if existing:
            if not existing.active:
                flash("–§–∏—Ä–º–∞ —Å–∞ –æ–≤–∏–º PIB-–æ–º –Ω–∏—ò–µ –∞–∫—Ç–∏–≤–Ω–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—ò–∞ –Ω–∏—ò–µ –º–æ–≥—É—õ–∞.")
                return redirect(url_for('main.register'))
            else:
                flash("–ü–æ—Å—Ç–æ—ò–∏ –≤–µ—õ –Ω–∞–ª–æ–≥ —Å–∞ —Ç–∏–º PIB-–æ–º.")
                return redirect(url_for('main.register'))

        new_employer = Employer(
            company_name=company_name,
            pib=pib,
            email=email,
            password_hash=password_hash,
            active=True  # –Ω–æ–≤–∞ —Ñ–∏—Ä–º–∞ —ò–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –¥–µ—Ñ–∞—É–ª—Ç—É
        )
        db.session.add(new_employer)
        db.session.commit()
        flash("–£—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—ò–∞. –°–∞–¥–∞ —Å–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—ò–∞–≤–∏—Ç–∏.")
        return redirect(url_for('main.login'))

    return render_template('register.html', current_lang=session.get('lang', 'sr'))


@main.route('/logout')
def logout():
    session.clear()
    flash("–£—Å–ø–µ—à–Ω–æ —Å—Ç–µ —Å–µ –æ–¥—ò–∞–≤–∏–ª–∏.")
    return redirect(url_for('main.index'))

@main.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        employer = Employer.query.filter_by(email=email).first()
        if employer and check_password_hash(employer.password_hash, password):

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∞ –¥–∞ –ª–∏ —ò–µ —Ñ–∏—Ä–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
            if not employer.active:
                flash("–í–∞—à–∞ —Ñ–∏—Ä–º–∞ –Ω–∏—ò–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–∏—ò–∞–≤–∞ –Ω–∏—ò–µ –º–æ–≥—É—õ–∞.")
                return redirect(url_for('main.login'))

            session['user_id'] = employer.id
            session['user_type'] = 'superadmin' if employer.is_superadmin else 'employer'
            session['company_name'] = employer.company_name

            if employer.is_superadmin:
                return redirect(url_for('main.admin_dashboard'))
            else:
                return redirect(url_for('main.drivers'))

        flash("–ü–æ–≥—Ä–µ—à–∞–Ω –µ–º–∞–∏–ª –∏–ª–∏ –ª–æ–∑–∏–Ω–∫–∞.")
        return redirect(url_for('main.login'))

    return render_template('login.html', current_lang=session.get('lang', 'sr'))





from flask import session

@main.route('/dashboard')
def dashboard():
    # –£–∑–º–µ–º–æ company_name –∏–∑ —Å–µ—Å–∏—ò–µ
    company_name = session.get('company_name')
    if not company_name:
        # –ê–∫–æ –Ω–µ–º–∞ –ø–æ–¥–∞—Ç–∞–∫–∞ —É —Å–µ—Å–∏—ò–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–∏—ò–∞–≤—É
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    return render_template('dashboard.html', company_name=company_name, current_lang=session.get('lang', 'sr'))

    
from app.models import Driver

from sqlalchemy import func

@main.route('/drivers')
def drivers():
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    employer = Employer.query.get(employer_id)
    if not employer:
        flash("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—ò–∏.")
        return redirect(url_for('main.login'))

    search = request.args.get('search', '').strip()

    # –°–≤–∏ –∞–∫—Ç–∏–≤–Ω–∏ –≤–æ–∑–∞—á–∏ –æ–≤–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞
    drivers_query = Driver.query.filter_by(employer_id=employer.id, active=True)

    if search:
        # –ü–æ—à—Ç–æ JMBG –≤–∏—à–µ –Ω–∏—ò–µ –¥–æ—Å—Ç—É–ø–∞–Ω –∫–∞–æ –æ—Ç–≤–æ—Ä–µ–Ω–∏ –ø–æ–¥–∞—Ç–∞–∫, –ù–ï–ú–û–ñ–ï–ú–û –≥–∞ –ø—Ä–µ—Ç—Ä–∞–∂–∏–≤–∞—Ç–∏
        # –£–º–µ—Å—Ç–æ —Ç–æ–≥–∞, –ø—Ä–µ—Ç—Ä–∞–∂—É—ò–µ–º–æ –ø–æ:
        # - full_name
        # - broju —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∫–∞—Ä—Ç–∏—Ü–µ (–∏–∑ –ø–æ–≤–µ–∑–∞–Ω–æ–≥ –º–æ–¥–µ–ª–∞ DriverCard)
        # - –±—Ä–æ—ò—É CPC –∫–∞—Ä—Ç–∏—Ü–µ
        drivers_query = drivers_query.filter(
            or_(
                Driver.full_name.ilike(f'%{search}%'),
                Driver.cpc_card_number.ilike(f'%{search}%'),
                Driver.cards.any(DriverCard.card_number.ilike(f'%{search}%'))
            )
        )

    drivers_list = drivers_query.all()

    # –ü—Ä–æ—Ä–∞—á—É–Ω –ø—Ä–æ—Å–µ—á–Ω–∏—Ö –æ—Ü–µ–Ω–∞
    driver_ratings = {}
    for d in drivers_list:
        avg_rating = db.session.query(func.avg(Rating.stars)).filter(Rating.driver_id == d.id).scalar()
        driver_ratings[d.id] = round(avg_rating, 2) if avg_rating else None

    return render_template(
        'drivers.html',
        drivers=drivers_list,
        driver_ratings=driver_ratings,
        search=search,
        current_lang=session.get('lang', 'sr')
    )

@main.route('/drivers/search_card', methods=['GET', 'POST'])
def search_driver_by_card():
    company_name = session.get('company_name')
    if not company_name:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    employer = Employer.query.filter_by(company_name=company_name).first()
    if not employer:
        flash("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏–∫–∞—Ü–∏—ò–∏.")
        return redirect(url_for('main.login'))

    if request.method == 'POST':
        card_number = request.form['card_number'].strip()

        driver = Driver.query.filter_by(card_number=card_number).first()

        if not driver:
            flash("–í–æ–∑–∞—á —Å–∞ –¥–∞—Ç–∏–º –±—Ä–æ—ò–µ–º —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∫–∞—Ä—Ç–∏—Ü–µ –Ω–µ –ø–æ—Å—Ç–æ—ò–∏.")
            return redirect(url_for('main.search_driver_by_card'))

        # –ê–∫–æ –≤–æ–∑–∞—á –Ω–∏—ò–µ —Ç—Ä–µ–Ω—É—Ç–Ω–æ –∫–æ–¥ –æ–≤–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞, –ø—Ä–∏–∫–∞–∂–∏ –º—É –¥–µ—Ç–∞—ô–µ –≥–¥–µ —ò–µ —Å–≤–µ —Ä–∞–¥–∏–æ
        if driver.employer_id != employer.id:
            # –£–∑–º–∏ —Å–≤–µ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–µ –∫–æ–¥ –∫–æ—ò–∏—Ö —ò–µ –≤–æ–∑–∞—á —Ä–∞–¥–∏–æ (–º–æ–∂–¥–∞ —Å–∞ –¥—Ä—É–≥–∏–º —Ç–∞–±–ª–∞–º–∞ –∞–∫–æ –ø–æ—Å—Ç–æ—ò–µ)
            # –ê–∫–æ –Ω–µ–º–∞—à –∏—Å—Ç–æ—Ä–∏—ò—É –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü–∞, –º–æ–∂–¥–∞ –º–æ—Ä–∞—à –¥–∞ –¥–æ–¥–∞—à
            # –ó–∞ —Å–∞–¥–∞ —õ–µ–º–æ —Å–∞–º–æ –ø—Ä–∏–∫–∞–∑–∞—Ç–∏ –≤–æ–∑–∞—á–∞ –∏ –ø–æ—Ä—É–∫—É
            return render_template('driver_exists.html', driver=driver, employer=employer, current_lang=session.get('lang', 'sr'))

        # –ê–∫–æ —ò–µ –≤–æ–∑–∞—á —Ç—Ä–µ–Ω—É—Ç–Ω–æ –∫–æ–¥ –æ–≤–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞ - –ø—Ä–µ—É—Å–º–µ—Ä–∏ –≥–∞ –Ω–∞ –ª–∏—Å—Ç—É –≤–æ–∑–∞—á–∞ –∏–ª–∏ –¥–µ—Ç–∞—ô–µ
        flash("–í–æ–∑–∞—á –≤–µ—õ —Ä–∞–¥–∏ —É –≤–∞—à–æ—ò —Ñ–∏—Ä–º–∏.")
        return redirect(url_for('main.drivers'))

    return render_template('search_driver.html', current_lang=session.get('lang', 'sr'))


@main.route('/drivers/<int:driver_id>/exists', methods=['GET'])
def driver_exists(driver_id):
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)

    # –£–∑–∏–º–∞—ö–µ —Å–≤–∏—Ö –æ—Ü–µ–Ω–∞ –∏ –ø–æ–¥–∞—Ç–∞–∫–∞ –æ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∏–º–∞ –∫–æ–¥ –∫–æ—ò–∏—Ö —ò–µ –≤–æ–∑–∞—á —Ä–∞–¥–∏–æ
    ratings_query = (
        db.session.query(Rating, Employer.company_name)
        .join(Employer, Rating.employer_id == Employer.id)
        .filter(Rating.driver_id == driver.id)
        .order_by(Rating.rated_at.desc())
    ).all()

    ratings_info = []
    for rating, employer_name in ratings_query:
        ratings_info.append({
            'employer_name': employer_name,
            'stars': rating.stars,
            'comment': rating.comment,
            'rated_at': rating.rated_at.strftime('%d.%m.%Y') if rating.rated_at else ''
        })

    return render_template('driver_exists.html', driver=driver, ratings_info=ratings_info, current_lang=session.get('lang', 'sr'))


@main.route('/driver/<int:driver_id>/deactivate', methods=['POST'])
def deactivate_driver(driver_id):
    employer_id = session.get('user_id')
    if not employer_id or session.get('user_type') != 'employer':
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)
    if driver.employer_id != employer_id:
        flash("–ù–µ–º–∞—Ç–µ –¥–æ–∑–≤–æ–ª—É –¥–∞ –º–µ—ö–∞—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–≤–æ–≥ –≤–æ–∑–∞—á–∞.")
        return redirect(url_for('main.drivers'))

    driver.active = False
    db.session.commit()
    flash(f"–í–æ–∑–∞—á {driver.full_name} —ò–µ —Å–∞–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–∞–Ω.")
    return redirect(url_for('main.drivers'))



@main.route('/drivers/all')
def all_drivers():
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ–ª–∏–º–æ –ø—Ä–∏—ò–∞–≤–∏—Ç–µ —Å–µ.")
        return redirect(url_for('main.login'))

    search = request.args.get('search')

    # –§–∏–ª—Ç—Ä–∏—Ä–∞—ò —Å–≤–µ –≤–æ–∑–∞—á–µ –∫–æ—ò–∏ —Å—É —Ä–∞–¥–∏–ª–∏ –∫–æ–¥ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞, –±–µ–∑ –æ–±–∑–∏—Ä–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å
    drivers_query = Driver.query.filter_by(employer_id=employer_id)
    if search:
        drivers_query = drivers_query.filter(
            (Driver.full_name.ilike(f'%{search}%')) | 
            (Driver.card_number.ilike(f'%{search}%'))
        )

    drivers_list = drivers_query.all()

    # –ò–∑—Ä–∞—á—É–Ω–∞—ò –ø—Ä–æ—Å–µ—á–Ω—É –æ—Ü–µ–Ω—É –∑–∞ —Å–≤–∞–∫–∏ –≤–æ–∑–∞—á
    from sqlalchemy import func
    driver_ratings = {}
    for d in drivers_list:
        avg_rating = db.session.query(func.avg(Rating.stars)).filter(Rating.driver_id == d.id).scalar()
        driver_ratings[d.id] = round(avg_rating, 2) if avg_rating else None

    return render_template('all_drivers.html', drivers=drivers_list, driver_ratings=driver_ratings, search=search, current_lang=session.get('lang', 'sr'))


# Ruta za prikaz forme za ocenjivanje vozaca
@main.route('/drivers/<int:driver_id>/rate', methods=['GET', 'POST'])
def rate_driver(driver_id):
    # –ü—Ä–æ–≤–µ—Ä–∞ –¥–∞ –ª–∏ —ò–µ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü –¥–∞ –±–∏—Å—Ç–µ –æ—Ü–µ–Ω–∏–ª–∏ –≤–æ–∑–∞—á–∞.")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)

    # –ü—Ä–æ–≤–µ—Ä–∏–º–æ –¥–∞ –ª–∏ –≤–µ—õ –ø–æ—Å—Ç–æ—ò–∏ –æ—Ü–µ–Ω–∞ –æ–≤–æ–≥ –≤–æ–∑–∞—á–∞ –æ–¥ –æ–≤–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞
    existing_rating = Rating.query.filter_by(driver_id=driver_id, employer_id=employer_id).first()

    if request.method == 'POST':
        rating_value = int(request.form['rating'])
        comment = request.form['comment']

        if existing_rating:
            # –ê–∂—É—Ä–∏—Ä–∞—ò –ø–æ—Å—Ç–æ—ò–µ—õ—É –æ—Ü–µ–Ω—É
            existing_rating.stars = rating_value
            existing_rating.comment = comment
            existing_rating.created_at = datetime.utcnow()
            flash('–û—Ü–µ–Ω–∞ —ò–µ —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω–∞.')
        else:
            # –ö—Ä–µ–∏—Ä–∞—ò –Ω–æ–≤—É –æ—Ü–µ–Ω—É
            new_rating = Rating(
                driver_id=driver_id,
                employer_id=employer_id,
                stars=rating_value,
                comment=comment
            )
            db.session.add(new_rating)
            flash('–û—Ü–µ–Ω–∞ —ò–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–¥–∞—Ç–∞.')

        db.session.commit()
        return redirect(url_for('main.drivers'))

    return render_template('rate_driver.html', driver=driver, existing_rating=existing_rating, current_lang=session.get('lang', 'sr'))

@main.route('/drivers/<int:driver_id>')
def driver_detail(driver_id):
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.")
        return redirect(url_for('main.login'))

    driver = Driver.query.options(
        joinedload(Driver.cards),
        joinedload(Driver.ratings).joinedload(Rating.employer)
    ).get_or_404(driver_id)

    currently_employed_by_this_employer = (
        driver.active and driver.employer_id == employer_id
    )

    return render_template(
        'driver_detail.html',
        driver=driver,
        ratings=driver.ratings,
        can_update_driver=currently_employed_by_this_employer
    )


@main.route('/reset-password', methods=['GET', 'POST'])
def reset_password_request():
    if request.method == 'POST':
        email = request.form['email']
        employer = Employer.query.filter_by(email=email).first()
        if employer:
            token = generate_reset_token(email)
            reset_url = url_for('main.reset_password_token', token=token, _external=True)
            
            # ‚úÖ –ó–∞–º–µ–Ω–∞ flash –ª–∏–Ω–∫–∞ —Å–ª–∞—ö–µ–º –º–µ—ò–ª–∞
            send_reset_email(email, reset_url)
        
        # –£–≤–µ–∫ –≤—Ä–∞—õ–∞–º–æ –∏—Å—Ç—É –ø–æ—Ä—É–∫—É —Ä–∞–¥–∏ –±–µ–∑–±–µ–¥–Ω–æ—Å—Ç–∏
        flash("–ê–∫–æ –µ–º–∞–∏–ª –ø–æ—Å—Ç–æ—ò–∏ —É —Å–∏—Å—Ç–µ–º—É, –ª–∏–Ω–∫ –∑–∞ —Ä–µ—Å–µ—Ç —ò–µ –ø–æ—Å–ª–∞—Ç.", 'info')
        return redirect(url_for('main.login'))

    return render_template('reset_password_request.html', current_lang=session.get('lang', 'sr'))


@main.route('/reset-password/<token>', methods=['GET', 'POST'])
def reset_password_token(token):
    email = verify_reset_token(token)
    if not email:
        flash('–õ–∏–Ω–∫ –Ω–∏—ò–µ –≤–∞–ª–∏–¥–∞–Ω –∏–ª–∏ —ò–µ –∏—Å—Ç–µ–∫–∞–æ.', 'danger')
        return redirect(url_for('main.login'))

    if request.method == 'POST':
        new_password = request.form['password']
        confirm_password = request.form.get('confirm_password')

        # –ü—Ä–æ–≤–µ—Äa –¥–∞ –ª–∏ —Å–µ –ª–æ–∑–∏–Ω–∫–µ –ø–æ–∫–ª–∞–ø–∞—ò—É
        if new_password != confirm_password:
            flash("–õ–æ–∑–∏–Ω–∫–µ —Å–µ –Ω–µ –ø–æ–∫–ª–∞–ø–∞—ò—É.", "danger")
            return redirect(url_for('main.reset_password_token', token=token))

        employer = Employer.query.filter_by(email=email).first()
        if employer:
            employer.password_hash = generate_password_hash(new_password)
            db.session.commit()
            flash('–õ–æ–∑–∏–Ω–∫–∞ —ò–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–µ—ö–µ–Ω–∞.', 'success')
            return redirect(url_for('main.login'))

    return render_template('reset_password_form.html', token=token, current_lang=session.get('lang', 'sr'))



from flask_mail import Message
from app import mail  # –∏–∑ —Ç–≤–æ—ò–µ –∞–ø–ª–∏–∫–∞—Ü–∏—ò–µ

def send_reset_email(to_email, reset_url):
    msg = Message("–†–µ—Å–µ—Ç–æ–≤–∞—ö–µ –ª–æ–∑–∏–Ω–∫–µ", recipients=[to_email])
    msg.body = f"""–ó–¥—Ä–∞–≤–æ,

–ó–∞—Ç—Ä–∞–∂–∏–ª–∏ —Å—Ç–µ —Ä–µ—Å–µ—Ç–æ–≤–∞—ö–µ –ª–æ–∑–∏–Ω–∫–µ. –ö–ª–∏–∫–Ω–∏—Ç–µ –∏–ª–∏ –Ω–∞–ª–µ–ø–∏—Ç–µ —Å–ª–µ–¥–µ—õ–∏ –ª–∏–Ω–∫ —É –ø—Ä–µ–≥–ª–µ–¥–∞—á:

{reset_url}

–ê–∫–æ –Ω–∏—Å—Ç–µ –í–∏ —Ç—Ä–∞–∂–∏–ª–∏ —Ä–µ—Å–µ—Ç, —Å–ª–æ–±–æ–¥–Ω–æ –∏–≥–Ω–æ—Ä–∏—à–∏—Ç–µ –æ–≤–∞—ò –º–µ—ò–ª.
"""
    mail.send(msg)


from flask_login import login_required, current_user

@main.route('/admin/firme')
@login_required
def sve_firme():
    if not current_user.is_superadmin:
        flash("Nemate pristup ovoj stranici.", "danger")
        return redirect(url_for('index'))

    from models import Employer  # ili kako ti je naziv modela za poslodavce
    sve_firme = Employer.query.all()
    return render_template('admin_firme.html', firme=sve_firme, current_lang=session.get('lang', 'sr'))


@main.route('/admin/dashboard')
def admin_dashboard():
    if session.get('user_type') != 'superadmin':
        flash("–ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç—É–ø –æ–≤–æ—ò —Å—Ç—Ä–∞–Ω–∏—Ü–∏.")
        return redirect(url_for('main.login'))

    # –ü—Ä–µ—Ç—Ä–∞–≥–∞ —Ñ–∏—Ä–º–∏
    company_query = request.args.get('company_query', '').strip()
    pib_query = request.args.get('pib_query', '').strip()

    # –ü—Ä–µ—Ç—Ä–∞–≥–∞ –≤–æ–∑–∞—á–∞
    driver_query = request.args.get('driver_query', '').strip()

    # –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ —Ñ–∏—Ä–º–∏ –ø–æ –∏–º–µ–Ω—É –∏ –ü–ò–ë-—É
    employers = Employer.query
    if company_query:
        employers = employers.filter(Employer.company_name.ilike(f'%{company_query}%'))
    if pib_query:
        employers = employers.filter(Employer.pib.ilike(f'%{pib_query}%'))
    employers = employers.all()

    # –§–∏–ª—Ç—Ä–∏—Ä–∞—ö–µ –≤–æ–∑–∞—á–∞ –ø–æ –∏–º–µ–Ω—É, —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∫–∞—Ä—Ç–∏—Ü–∏ (—É DriverCard) –∏ CPC –±—Ä–æ—ò—É
    drivers = Driver.query
    if driver_query:
        like_pattern = f'%{driver_query}%'
        # –ü—Ä–∞–≤–∏–º–æ join —Å–∞ DriverCard —Ç–∞–±–µ–ª–æ–º —Ä–∞–¥–∏ –ø—Ä–µ—Ç—Ä–∞–≥–µ –ø–æ card_number
        drivers = drivers.join(Driver.cards).filter(
            (Driver.full_name.ilike(like_pattern)) |
            (Driver.cpc_card_number.ilike(like_pattern)) |
            (DriverCard.card_number.ilike(like_pattern))
        ).distinct()

    drivers = drivers.all()

    ratings = Rating.query.all()

    return render_template(
        'admin/dashboard.html',
        employers=employers,
        drivers=drivers,
        ratings=ratings,
        company_query=company_query,
        pib_query=pib_query,
        driver_query=driver_query,
        current_lang=session.get('lang', 'sr')
    )



@main.route('/admin/employer/<int:employer_id>/drivers')
def admin_employer_drivers(employer_id):
    if session.get('user_type') != 'superadmin':
        flash("–ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç—É–ø –æ–≤–æ—ò —Å—Ç—Ä–∞–Ω–∏—Ü–∏.")
        return redirect(url_for('main.login'))

    employer = Employer.query.get_or_404(employer_id)
    drivers = Driver.query.filter_by(employer_id=employer.id).all()

    return render_template('admin/employer_drivers.html', employer=employer, drivers=drivers, current_lang=session.get('lang', 'sr'))


@main.route('/change_language', methods=['POST'])
def change_language():
    lang = request.form.get('language', 'sr')          # 'sr', 'en', ...
    script = request.form.get('script', 'cyrillic')    # 'latin' –∏–ª–∏ 'cyrillic', –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–Ω–æ —õ–∏—Ä–∏–ª–∏—Ü–∞

    session['lang'] = lang
    session['script'] = script

    return redirect(request.referrer or url_for('main.index'))


@main.route('/admin/employer/<int:employer_id>/toggle_status')
def toggle_employer_status(employer_id):
    if session.get('user_type') != 'superadmin':
        flash("–ù–µ–º–∞—Ç–µ –ø—Ä–∏—Å—Ç—É–ø –æ–≤–æ—ò –∞–∫—Ü–∏—ò–∏.")
        return redirect(url_for('main.login'))

    employer = Employer.query.get_or_404(employer_id)
    employer.active = not employer.active
    db.session.commit()

    flash(f"–°—Ç–∞—Ç—É—Å —Ñ–∏—Ä–º–µ '{employer.company_name}' —ò–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–º–µ—ö–µ–Ω.")
    return redirect(url_for('main.admin_dashboard'))


from datetime import datetime

@main.route('/drivers/<int:driver_id>/update', methods=['GET', 'POST']) 
def update_driver(driver_id):
    employer_id = session.get('user_id')
    if not employer_id:
        flash("–ú–æ—Ä–∞—Ç–µ –±–∏—Ç–∏ –ø—Ä–∏—ò–∞–≤—ô–µ–Ω–∏ –∫–∞–æ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü.", "danger")
        return redirect(url_for('main.login'))

    driver = Driver.query.get_or_404(driver_id)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞ –ª–∏ —ò–µ –≤–æ–∑–∞—á –∑–∞–ø–æ—Å–ª–µ–Ω –∫–æ–¥ —Ç—Ä–µ–Ω—É—Ç–Ω–æ–≥ –ø–æ—Å–ª–æ–¥–∞–≤—Ü–∞
    if not driver.active or driver.employer_id != employer_id:
        flash("–ù–µ–º–∞—Ç–µ –¥–æ–∑–≤–æ–ª—É –¥–∞ –∞–∂—É—Ä–∏—Ä–∞—Ç–µ –æ–≤–æ–≥ –≤–æ–∑–∞—á–∞.", "danger")
        return redirect(url_for('main.driver_detail', driver_id=driver_id))

    if request.method == 'POST':
        # –ü—Ä–∏–∫—É–ø—ô–∞—ö–µ –ø–æ–¥–∞—Ç–∞–∫–∞ –∏–∑ —Ñ–æ—Ä–º–µ
        new_full_name = request.form.get('full_name', '').strip()
        new_card_number = request.form.get('card_number', '').strip()
        expiry_date_str = request.form.get('expiry_date', '').strip()
        cpc_card_number = request.form.get('cpc_card_number', '').strip()
        cpc_expiry_date_str = request.form.get('cpc_expiry_date', '').strip()

        # –ö–æ–Ω–≤–µ—Ä–∑–∏—ò–∞ –¥–∞—Ç—É–º–∞
        expiry_date = None
        cpc_expiry_date = None

        if expiry_date_str:
            try:
                expiry_date = datetime.strptime(expiry_date_str, '%Y-%m-%d').date()
            except ValueError:
                flash("–ù–µ–∏—Å–ø—Ä–∞–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—É–º–∞ –∏—Å—Ç–µ–∫–∞.", "warning")
                return redirect(url_for('main.update_driver', driver_id=driver_id))

        if cpc_expiry_date_str:
            try:
                cpc_expiry_date = datetime.strptime(cpc_expiry_date_str, '%Y-%m-%d').date()
            except ValueError:
                flash("–ù–µ–∏—Å–ø—Ä–∞–≤–∞–Ω —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–µ–∫–∞ CPC –∫–∞—Ä—Ç–∏—Ü–µ.", "warning")
                return redirect(url_for('main.update_driver', driver_id=driver_id))

        # –ê–∂—É—Ä–∏—Ä–∞—ö–µ –∏–º–µ–Ω–∞ –∞–∫–æ —ò–µ –ø—Ä–æ–º–µ—ö–µ–Ω–æ
        if new_full_name and new_full_name != driver.full_name:
            driver.full_name = new_full_name

        # –ü—Ä–æ–Ω–∞—í–∏ —Ç—Ä–µ–Ω—É—Ç–Ω–æ –∞–∫—Ç–∏–≤–Ω—É –∫–∞—Ä—Ç–∏—Ü—É
        current_card = next((card for card in driver.cards if card.is_active), None)

        # –î–æ–¥–∞—ò –Ω–æ–≤—É –∫–∞—Ä—Ç–∏—Ü—É –∞–∫–æ —ò–µ –±—Ä–æ—ò –ø—Ä–æ–º–µ—ö–µ–Ω
        if new_card_number and (not current_card or current_card.card_number != new_card_number):
            if current_card:
                current_card.is_active = False

            new_card = DriverCard(
                card_number=new_card_number,
                driver_id=driver.id,
                is_active=True,
                expiry_date=expiry_date
            )
            db.session.add(new_card)
            flash("–î–æ–¥–∞—Ç–∞ —ò–µ –Ω–æ–≤–∞ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ—Å–∫–∞ –∫–∞—Ä—Ç–∏—Ü–∞.", "success")
        else:
            flash("–ë—Ä–æ—ò —Ç–∞—Ö–æ–≥—Ä–∞—Ñ –∫–∞—Ä—Ç–∏—Ü–µ –Ω–∏—ò–µ –ø—Ä–æ–º–µ—ö–µ–Ω.", "info")

        # –ê–∂—É—Ä–∏—Ä–∞—ò CPC –ø–æ–¥–∞—Ç–∫–µ
        driver.cpc_card_number = cpc_card_number or None
        driver.cpc_expiry_date = cpc_expiry_date

        db.session.commit()
        flash("–ü–æ–¥–∞—Ü–∏ –æ –≤–æ–∑–∞—á—É —Å—É —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω–∏.", "success")
        return redirect(url_for('main.driver_detail', driver_id=driver.id))

    # ‚úÖ –ó–∞ GET –∑–∞—Ö—Ç–µ–≤ ‚Äî –ø—Ä–∏–ø—Ä–µ–º–∏ –¥–∞—Ç—É–º–∏ —É –æ–±–ª–∏–∫—É 'YYYY-MM-DD' –∑–∞ —à–∞–±–ª–æ–Ω
    active_card = next((card for card in driver.cards if card.is_active), None)
    expiry_date_str = active_card.expiry_date.strftime('%Y-%m-%d') if active_card and active_card.expiry_date else ''
    cpc_expiry_date_str = driver.cpc_expiry_date.strftime('%Y-%m-%d') if driver.cpc_expiry_date else ''

    return render_template(
        'update_driver.html',
        driver=driver,
        expiry_date_str=expiry_date_str,
        cpc_expiry_date_str=cpc_expiry_date_str
    )


@main.route('/terms')
def terms():
    # –ê–∫–æ —ò–µ –ø–æ—Å–ª–æ–¥–∞–≤–∞—Ü –ø—Ä–∏—ò–∞–≤—ô–µ–Ω ‚Üí –¥–µ—Ç–∞—ô–Ω–∏ —É—Å–ª–æ–≤–∏
    if session.get('user_type') == 'employer' and session.get('user_id'):
        return render_template('terms.html')
    # –ò–Ω–∞—á–µ ‚Üí —ò–∞–≤–Ω–∏ —É—Å–ª–æ–≤–∏
    return render_template('terms_public.html')


@main.route('/terms_public')
def terms_public():
    # –à–∞–≤–Ω–∞ –≤–µ—Ä–∑–∏—ò–∞ —É—Å–ª–æ–≤–∞ –∫–æ—Ä–∏—à—õ–µ—ö–∞, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ—ö–∞ –ø—Ä–∏—Å—Ç—É–ø–∞
    return render_template('terms_public.html')

@main.route('/privacy-policy')
def privacy_policy():
    return render_template('privacy_policy.html')
